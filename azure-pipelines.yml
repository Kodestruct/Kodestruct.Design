# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4


trigger:
- master



variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: 'Build and pack project'

  jobs:
  - job: build
    displayName: 'Build project'
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'


# The first task is the dotnet command build, pointing to our csproj file
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        arguments: '--configuration $(buildConfiguration)'
        projects: |
          'Kodestruct.Common/Kodestruct.Common.csproj'
          'Kodestruct.Steel/Kodestruct.Steel.csproj'
          'Kodestruct.Concrete/Kodestruct.Concrete.csproj'
          'Kodestruct.Wood/Kodestruct.Wood.csproj'
          'Kodestruct.Aluminum/Kodestruct.Aluminum.csproj'
          'Kodestruct.Loads/Kodestruct.Loads.csproj'
          'Kodestruct.Analysis/Kodestruct.Analysis.csproj'


    

# The second task is dotnet pack command again pointing to the csproj file
# The nobuild means the project will not be compiled before running pack, because its already built in above step
    - task: DotNetCoreCLI@2
      inputs: 
        command: 'pack'
        packagesToPack: |
          'Kodestruct.Common/Kodestruct.Common.csproj'
          'Kodestruct.Steel/Kodestruct.Steel.csproj'
          'Kodestruct.Concrete/Kodestruct.Concrete.csproj'
          'Kodestruct.Wood/Kodestruct.Wood.csproj'
          'Kodestruct.Aluminum/Kodestruct.Aluminum.csproj'
          'Kodestruct.Loads/Kodestruct.Loads.csproj'
          'Kodestruct.Analysis/Kodestruct.Analysis.csproj'
        nobuild: true
        outputDir: '$(Build.ArtifactStagingDirectory)/Packages'

# The last task is a nuget command, nuget push
# This will push any .nupkg files to the 'TestFeed' artifact feed
# allowPackageConflicts allows us to build the same version and not throw an error when trying to push
# instead it just ingores the latest package unless the version changes
#- task: NuGetCommand@2
#  displayName: 'nuget push'
#  inputs:
#    command: 'push'
#    feedsToUse: 'select'
#    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
#    nuGetFeedType: 'internal'
#    publishVstsFeed: 'TestFeed'
#    versioningScheme: 'off'
#    allowPackageConflicts: true

- stage: 'PublishNugetNuGetPackage'
  displayName: 'Publish Release NuGet Package'
  dependsOn: 'Build'
  condition: succeeded()
  jobs:
  - deployment:
    pool:
      vmImage: 'windows-latest'
    environment: 'nuget-org'
    strategy:
     runOnce:
       deploy:
         steps:
         - task: NuGetCommand@2
           displayName: 'Push NuGet Package'
           inputs:
             command: 'push'
             packagesToPush: '$(Build.ArtifactStagingDirectory)/Packages/*.nupkg'
             nuGetFeedType: 'external'
             publishFeedCredentials: 'NuGet'